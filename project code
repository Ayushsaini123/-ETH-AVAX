// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

/* write a smart contract that implements the require(), assert() and revert() statements.

Functionality
Contract successfully uses require()
Contract successfully uses assert()
Contract successfully uses revert() statements */

contract ErrorHandling {
    address public user;
    uint256 public saving;
 
    constructor() {
        user = msg.sender;
       saving = 0;
    }

   
    function deposit(uint256 amount) public {
        require(msg.sender == user, "Deposit failed ");
        require(amount > 0, "Amount must be positive");

       saving += amount;
    }

   
    function withdraw(uint256 amount) public {
        require(msg.sender == user, "Withdraw failed ");
        require(amount <= saving, "insufficient balance");

        saving -= amount;
        assert(saving >= 0);
    }
 
    function emergencyWithdraw(uint256 amount) public {
        require(msg.sender == user, "Emergency withdraw failed ");

        if (amount > saving) {
            revert("Sorry, not enough balance");
        }

        saving-= amount;
    }

    function reset() public {
        require(msg.sender == user, "Reset failed ");
        
   
       saving = 0;
    }
 
    function getBalance() public view returns (uint256) {
        return saving;
    }
}
